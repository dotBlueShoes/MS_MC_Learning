buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:3.+'
    }
}
        
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

/* Setting up the build variables. */
version = minecraftVersion + "-" + "i-dont-care-version"

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8;
compileJava { sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8; }

minecraft {
    mappings channel: 'snapshot', version: mappingsVersion
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
        }

        server {
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
        }
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:' + minecraftVersion + '-' + forgeVersion;
}

sourceSets { main { output.resourcesDir = output.classesDir; } }

processResources { 
    /* This will ensure that it will change on build. */
    inputs.property 'mcversion', minecraftVersion;
    inputs.property 'version', version;
    inputs.property 'modid', archivesBaseName;
    /* This replaces mcmod.info variables. */
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info';

        expand ([
            'mcversion': minecraftVersion,
            'version': version,
            'modid': archivesBaseName
        ]);
    }
    /* Means copy everything else except the mcmod.info file. */
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info';
    }
}

jar {
    manifest {
        attributes([
            "FMLCorePlugin": coreModPlugin,
            "FMLCorePluginContainsFMLMod": "true",
            "Specification-Title": archivesBaseName,
            "Specification-Vendor": author,
            "Specification-Version": "1",
            "Implementation-Title": name,
            "Implementation-Version": version,
            "Implementation-Vendor" :author,
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar') 

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

/* Declaration of the "incrementBuildNumber" task. */
task incrementBuildNumber

incrementBuildNumber.doFirst {
    def versionBuildFile = file('gradleBuildNumber.properties')

    if (versionBuildFile.canRead()) {
        Properties versionProperties = new Properties()
        versionProperties.load(new FileInputStream(versionBuildFile))
        int newNumber = versionProperties['buildNumber'].toInteger() + 1
        versionProperties['buildNumber'] = newNumber.toString()
        versionProperties.store(versionBuildFile.newWriter(), null)
        println("BuildNumber has incremented to: " + newNumber)
    } else 
        println("Could not find 'gradleBuildNumber.properties' file! Ignoring increment.")

}

build.finalizedBy incrementBuildNumber;